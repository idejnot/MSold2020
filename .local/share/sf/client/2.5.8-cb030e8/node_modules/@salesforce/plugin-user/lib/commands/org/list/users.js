"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListUsersCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'list');
class ListUsersCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ListUsersCommand);
        const org = flags['target-org'];
        const conn = flags['target-org'].getConnection(flags['api-version']);
        // parallelize 2 org queries and 2 fs operations
        const [userInfos, profileInfos, userAuthData, aliases] = await Promise.all([
            buildUserInfos(conn),
            buildProfileInfos(conn),
            org.readUserAuthFiles(),
            (await core_1.StateAggregator.getInstance()).aliases,
        ]);
        const authList = userAuthData.map((authData) => {
            const username = authData.getUsername();
            // if they passed in an alias see if it maps to an Alias.
            const alias = aliases.get(username);
            const userInfo = userInfos.get(username);
            const profileName = userInfo && profileInfos.get(userInfo.ProfileId)?.Name;
            return {
                defaultMarker: flags['target-org']?.getUsername() === username ? '(A)' : '',
                alias: alias ?? '',
                username,
                profileName,
                orgId: flags['target-org']?.getOrgId(),
                accessToken: authData.getFields().accessToken,
                instanceUrl: authData.getFields().instanceUrl,
                loginUrl: authData.getFields().loginUrl,
                userId: userInfos.get(username)?.Id,
            };
        });
        const columns = {
            defaultMarker: { header: 'Default' },
            alias: { header: 'Alias' },
            username: { header: 'Username' },
            profileName: { header: 'Profile Name' },
            userId: { header: 'User Id' },
        };
        this.styledHeader(`Users in org ${flags['target-org']?.getOrgId()}`);
        this.table(authList, columns);
        return authList;
    }
}
exports.ListUsersCommand = ListUsersCommand;
// eslint-disable-next-line sf-plugin/encourage-alias-deprecation
ListUsersCommand.aliases = ['force:user:list'];
ListUsersCommand.summary = messages.getMessage('summary');
ListUsersCommand.description = messages.getMessage('description');
ListUsersCommand.examples = messages.getMessages('examples');
ListUsersCommand.flags = {
    'target-dev-hub': sf_plugins_core_1.Flags.optionalOrg({
        char: 'v',
        summary: messages.getMessage('flags.target-hub.summary'),
        hidden: true,
        deprecated: {
            message: messages.getMessage('flags.target-hub.deprecation'),
        },
    }),
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
/**
 * Build a map of { [ProfileId]: ProfileName } for all profiles in the org
 *
 * @private
 * @return Promise<ProfileInfo>
 */
const buildProfileInfos = async (conn) => {
    const profileRecords = await conn.query('SELECT id, name FROM Profile');
    return new Map((profileRecords.records ?? []).map((profileInfo) => [profileInfo.Id, profileInfo]));
};
/**
 * query the user table and build a map of Username: { ProfileId, Id } } for all users in the org
 *
 * @private
 * @return Promise<UserInfo>
 */
const buildUserInfos = async (conn) => {
    const userRecords = await conn.query('SELECT username, profileid, id FROM User');
    return new Map((userRecords.records ?? []).map((userInfo) => [userInfo.Username, userInfo]));
};
//# sourceMappingURL=users.js.map