"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const deployResultFormatter_1 = require("../../../formatters/deployResultFormatter");
const progressBar_1 = require("../../../utils/progressBar");
const deploy_1 = require("../../../utils/deploy");
const deployCache_1 = require("../../../utils/deployCache");
const errorCodes_1 = require("../../../utils/errorCodes");
const flags_1 = require("../../../utils/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.resume');
const testFlags = 'Test';
class DeployMetadataResume extends sf_plugins_core_1.SfCommand {
    async run() {
        const [{ flags }, cache] = await Promise.all([this.parse(DeployMetadataResume), deployCache_1.DeployCache.create()]);
        const jobId = cache.resolveLatest(flags['use-most-recent'], flags['job-id']);
        // if it was async before, then it should not be async now.
        const deployOpts = { ...cache.get(jobId), async: false };
        if ((0, deploy_1.isNotResumable)(deployOpts.status)) {
            throw messages.createError('error.DeployNotResumable', [jobId, deployOpts.status]);
        }
        const wait = flags.wait ?? kit_1.Duration.minutes(deployOpts.wait);
        const { deploy } = await (0, deploy_1.executeDeploy)(
        // there will always be conflicts on a resume if anything deployed--the changes on the server are not synced to local
        {
            ...deployOpts,
            wait,
            'dry-run': false,
            'ignore-conflicts': true,
            // TODO: isMdapi is generated from 'metadata-dir' flag, but we don't have that flag here
            // change the cache value to actually cache the metadata-dir, and if there's a value, it isMdapi
            // deployCache~L38, so to tell the executeDeploy method it's ok to not have a project, we spoof a metadata-dir
            // in deploy~L140, it checks the if the id is present, so this metadata-dir value is never _really_ used
            'metadata-dir': deployOpts.isMdapi ? { type: 'file', path: 'testing' } : undefined,
        }, this.config.bin, this.project, jobId);
        this.log(`Deploy ID: ${(0, chalk_1.bold)(jobId)}`);
        new progressBar_1.DeployProgress(deploy, this.jsonEnabled()).start();
        const result = await deploy.pollStatus(500, wait.seconds);
        process.exitCode = (0, deploy_1.determineExitCode)(result);
        const formatter = new deployResultFormatter_1.DeployResultFormatter(result, {
            ...flags,
            verbose: deployOpts.verbose,
            concise: deployOpts.concise,
        });
        if (!this.jsonEnabled())
            formatter.display();
        if (!deploy.id) {
            throw new core_1.SfError('The deploy id is not available.');
        }
        cache.update(deploy.id, { status: result.response.status });
        await cache.write();
        return formatter.getJson();
    }
}
exports.default = DeployMetadataResume;
DeployMetadataResume.description = messages.getMessage('description');
DeployMetadataResume.summary = messages.getMessage('summary');
DeployMetadataResume.examples = messages.getMessages('examples');
DeployMetadataResume.aliases = ['deploy:metadata:resume'];
DeployMetadataResume.deprecateAliases = true;
DeployMetadataResume.flags = {
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
        exclusive: ['verbose'],
    }),
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        length: 'both',
        description: messages.getMessage('flags.job-id.description'),
        summary: messages.getMessage('flags.job-id.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.use-most-recent.description'),
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        exclusive: ['concise'],
    }),
    // we want this to allow undefined so that we can use the default value from the cache
    // eslint-disable-next-line sf-plugin/flag-min-max-default
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        helpValue: '<minutes>',
        min: 1,
    }),
    'coverage-formatters': { ...flags_1.coverageFormattersFlag, helpGroup: testFlags },
    junit: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.junit.summary'),
        helpGroup: testFlags,
    }),
    'results-dir': sf_plugins_core_1.Flags.directory({
        relationships: [{ type: 'some', flags: ['coverage-formatters', 'junit'] }],
        summary: messages.getMessage('flags.results-dir.summary'),
        helpGroup: testFlags,
    }),
};
DeployMetadataResume.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_1.EnvironmentVariable.SF_USE_PROGRESS_BAR);
DeployMetadataResume.errorCodes = (0, sf_plugins_core_1.toHelpSection)('ERROR CODES', errorCodes_1.DEPLOY_STATUS_CODES_DESCRIPTIONS);
//# sourceMappingURL=resume.js.map