"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.doInstallationCodeSigningVerification = exports.doPrompt = exports.VerificationConfig = exports.InstallationVerification = exports.getNpmRegistry = exports.verify = exports.DEFAULT_REGISTRY = void 0;
const path = require("path");
const stream_1 = require("stream");
const url_1 = require("url");
const crypto = require("crypto");
const fs = require("fs");
const promises_1 = require("fs/promises");
const core_1 = require("@salesforce/core");
const got_1 = require("got");
const proxy_agent_1 = require("proxy-agent");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_2 = require("@oclif/core");
const npmCommand_1 = require("../shared/npmCommand");
const errors_1 = require("./errors");
const CRYPTO_LEVEL = 'RSA-SHA256';
const ALLOW_LIST_FILENAME = 'unsignedPluginAllowList.json';
exports.DEFAULT_REGISTRY = 'https://registry.npmjs.org/';
class CodeVerifierInfo {
    get dataToVerify() {
        if (!this.data) {
            throw new Error('CodeVerifierInfo: Verifier has no data because it has not be set');
        }
        return this.data;
    }
    set dataToVerify(value) {
        this.data = value;
    }
    // eslint-disable-next-line @typescript-eslint/member-ordering
    get signatureStream() {
        if (!this.signature) {
            throw new Error('CodeVerifierInfo: signatureStream has no value because it has not be set');
        }
        return this.signature;
    }
    set signatureStream(value) {
        this.signature = value;
    }
    // eslint-disable-next-line @typescript-eslint/member-ordering
    get publicKeyStream() {
        if (!this.publicKey) {
            throw new Error('CodeVerifierInfo: publicKey has no value because it has not be set');
        }
        return this.publicKey;
    }
    set publicKeyStream(value) {
        this.publicKey = value;
    }
}
function validSalesforceHostname(url) {
    if (!url) {
        return false;
    }
    const parsedUrl = new url_1.URL(url);
    if (process.env.SFDX_ALLOW_ALL_SALESFORCE_CERTSIG_HOSTING === 'true') {
        return Boolean(parsedUrl.hostname) && /(\.salesforce\.com)$/.test(parsedUrl.hostname);
    }
    else {
        return (parsedUrl.protocol === 'https:' &&
            Boolean(parsedUrl.hostname) &&
            parsedUrl.hostname === 'developer.salesforce.com');
    }
}
function retrieveKey(stream) {
    return new Promise((resolve, reject) => {
        let key = '';
        if (stream) {
            stream.on('data', (chunk) => {
                key += chunk;
            });
            stream.on('end', () => {
                if (!key.includes('-----BEGIN')) {
                    return reject(new core_1.SfError('The specified key format is invalid.', 'InvalidKeyFormat'));
                }
                return resolve(key);
            });
            stream.on('error', (err) => reject(err));
        }
    });
}
async function verify(codeVerifierInfo) {
    const publicKey = await retrieveKey(codeVerifierInfo.publicKeyStream);
    const signApi = crypto.createVerify(CRYPTO_LEVEL);
    return new Promise((resolve, reject) => {
        codeVerifierInfo.dataToVerify.on('error', (err) => reject(errorHandlerForVerify(err)));
        codeVerifierInfo.dataToVerify.pipe(signApi);
        codeVerifierInfo.dataToVerify.on('end', () => {
            // The sign signature returns a base64 encode string.
            let signature = Buffer.alloc(0);
            codeVerifierInfo.signatureStream.on('data', (chunk) => {
                signature = Buffer.concat([signature, chunk]);
            });
            codeVerifierInfo.signatureStream.on('end', () => {
                if (signature.byteLength === 0) {
                    return reject(new core_1.SfError('The provided signature is invalid or missing.', 'InvalidSignature'));
                }
                else {
                    const verification = signApi.verify(publicKey, signature.toString('utf8'), 'base64');
                    return resolve(verification);
                }
            });
            codeVerifierInfo.signatureStream.on('error', (err) => reject(errorHandlerForVerify(err)));
        });
    });
}
exports.verify = verify;
const errorHandlerForVerify = (err) => {
    if ('code' in err && err.code === 'DEPTH_ZERO_SELF_SIGNED_CERT') {
        return (0, errors_1.setErrorName)(new core_1.SfError('Encountered a self signed certificated. To enable "export NODE_TLS_REJECT_UNAUTHORIZED=0"'), 'SelfSignedCert');
    }
    return err;
};
const getNpmRegistry = () => new url_1.URL(process.env.SFDX_NPM_REGISTRY ?? exports.DEFAULT_REGISTRY);
exports.getNpmRegistry = getNpmRegistry;
/**
 * class for verifying a digital signature pack of an npm
 */
class InstallationVerification {
    /**
     * setter for the cli engine config
     *
     * @param _config cli engine config
     */
    setConfig(_config) {
        if (_config) {
            this.config = _config;
            return this;
        }
        throw (0, errors_1.setErrorName)(new core_1.SfError('the cli engine config cannot be null', 'InvalidParam'), 'InvalidParam');
    }
    /**
     * setter for the plugin name
     *
     * @param _pluginName the published plugin name
     */
    setPluginNpmName(_pluginName) {
        if (_pluginName) {
            this.pluginNpmName = _pluginName;
            return this;
        }
        throw (0, errors_1.setErrorName)(new core_1.SfError('the plugin name cannot be null', 'InvalidParam'), 'InvalidParam');
    }
    /**
     * validates the digital signature.
     */
    async verify() {
        const logger = await this.getLogger();
        const npmMeta = await this.streamTagGz();
        if (!npmMeta.tarballLocalPath) {
            throw new core_1.SfError('The npmMeta does not contain a tarball path');
        }
        if (!npmMeta.signatureUrl) {
            throw new core_1.SfError('The npmMeta does not contain a signatureUrl');
        }
        if (!npmMeta.publicKeyUrl) {
            throw new core_1.SfError('The npmMeta does not contain a publicKeyUrl');
        }
        logger.debug(`verify | Found npmMeta? ${!!npmMeta}`);
        logger.debug(`verify | creating a read stream for path - npmMeta.tarballLocalPath: ${npmMeta.tarballLocalPath}`);
        logger.debug(`verify | npmMeta.signatureUrl: ${npmMeta.signatureUrl}`);
        logger.debug(`verify | npmMeta.publicKeyUrl: ${npmMeta.publicKeyUrl}`);
        const [signatureStream, publicKeyStream] = await Promise.all([
            getSigningContent(npmMeta.signatureUrl),
            getSigningContent(npmMeta.publicKeyUrl),
        ]);
        const info = new CodeVerifierInfo();
        info.dataToVerify = fs.createReadStream(npmMeta.tarballLocalPath, { encoding: 'binary' });
        info.publicKeyStream = publicKeyStream;
        info.signatureStream = signatureStream;
        npmMeta.verified = await verify(info);
        try {
            await fs.promises.rm(npmMeta.tarballLocalPath);
        }
        catch (err) {
            logger.debug(`error occurred deleting cache tgz at path: ${npmMeta.tarballLocalPath}`);
            logger.debug(err);
        }
        return npmMeta;
    }
    async isAllowListed() {
        const logger = await this.getLogger();
        const allowListedFilePath = path.join(this.getConfigPath() ?? '', ALLOW_LIST_FILENAME);
        logger.debug(`isAllowListed | allowlistFilePath: ${allowListedFilePath}`);
        let fileContent;
        try {
            fileContent = await fs.promises.readFile(allowListedFilePath, 'utf8');
            const allowlistArray = JSON.parse(fileContent);
            logger.debug('isAllowListed | Successfully parsed allowlist.');
            const nameToFind = this.pluginNpmName?.toString();
            return nameToFind ? allowlistArray.includes(nameToFind) : false;
        }
        catch (err) {
            if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {
                return false;
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Downloads the tgz file content and stores it in a cache folder
     */
    async streamTagGz() {
        const logger = await this.getLogger();
        const npmMeta = await this.retrieveNpmMeta();
        if (!npmMeta.tarballUrl) {
            throw new Error('tarballUrl is not defined in the npmMeta object');
        }
        const urlObject = new url_1.URL(npmMeta.tarballUrl);
        const urlPathsAsArray = urlObject.pathname.split('/');
        npmMeta.tarballFilename = npmMeta.moduleName?.replace(/@/g, '');
        logger.debug(`streamTagGz | urlPathsAsArray: ${urlPathsAsArray.join(',')}`);
        const fileNameStr = urlPathsAsArray[urlPathsAsArray.length - 1];
        logger.debug(`streamTagGz | fileNameStr: ${fileNameStr}`);
        // Make sure the cache path exists.
        try {
            if (!npmMeta.moduleName) {
                throw new Error('moduleName is not defined in the npmMeta object');
            }
            if (!npmMeta.version) {
                throw new Error('version is not defined in the npmMeta object');
            }
            await (0, promises_1.mkdir)(this.getCachePath(), { recursive: true });
            const npmModule = new npmCommand_1.NpmModule(npmMeta.moduleName, npmMeta.version, this.config?.cliRoot);
            await npmModule.fetchTarball((0, exports.getNpmRegistry)().href, {
                cwd: this.getCachePath(),
            });
            const tarBallFile = fs
                .readdirSync(this.getCachePath(), { withFileTypes: true })
                .find((entry) => entry.isFile() && npmMeta.version && entry.name.includes(npmMeta.version));
            if (!tarBallFile) {
                throw new Error(`Unable to find retrieved tarball file for ${npmMeta.moduleName} version ${npmMeta.version}`);
            }
            npmMeta.tarballLocalPath = path.join(this.getCachePath(), tarBallFile.name);
        }
        catch (err) {
            logger.debug(err);
            throw err;
        }
        return npmMeta;
    }
    // this is generally $HOME/.config/sfdx
    getConfigPath() {
        if (!this.config?.configDir) {
            throw new Error('configDir is not defined in the config object');
        }
        return this.config.configDir;
    }
    // this is generally $HOME/Library/Caches/sfdx on mac
    getCachePath() {
        if (!this.config?.cacheDir) {
            throw new Error('cacheDir is not defined in the config object');
        }
        return this.config.cacheDir;
    }
    /**
     * Invoke npm to discover a urls for the certificate and digital signature.
     */
    async retrieveNpmMeta() {
        const logger = await this.getLogger();
        const npmRegistry = (0, exports.getNpmRegistry)();
        if (!this.pluginNpmName) {
            throw new Error('pluginNpmName is not defined on the InstallationVerification class.  setPluginNpmName should have been called before this method.');
        }
        logger.debug(`retrieveNpmMeta | npmRegistry: ${npmRegistry.href}`);
        logger.debug(`retrieveNpmMeta | this.pluginNpmName.name: ${this.pluginNpmName.name}`);
        logger.debug(`retrieveNpmMeta | this.pluginNpmName.scope: ${this.pluginNpmName.scope}`);
        logger.debug(`retrieveNpmMeta | this.pluginNpmName.tag: ${this.pluginNpmName.tag}`);
        const npmShowModule = this.pluginNpmName.scope
            ? `@${this.pluginNpmName.scope}/${this.pluginNpmName.name}`
            : this.pluginNpmName.name;
        const npmModule = new npmCommand_1.NpmModule(npmShowModule, this.pluginNpmName.tag, this.config?.cliRoot);
        const npmMetadata = npmModule.show(npmRegistry.href);
        logger.debug('retrieveNpmMeta | Found npm meta information.');
        if (!npmMetadata.versions) {
            const err = new core_1.SfError(`The npm metadata for plugin ${this.pluginNpmName.name} is missing the versions attribute.`, 'InvalidNpmMetadata');
            throw (0, errors_1.setErrorName)(err, 'InvalidNpmMetadata');
        }
        // Assume the tag is version tag.
        let versionNumber = npmMetadata.versions.find((version) => version === this.pluginNpmName?.tag);
        logger.debug(`retrieveNpmMeta | versionObject: ${JSON.stringify(versionNumber)}`);
        // If the assumption was not correct the tag must be a non-versioned dist-tag or not specified.
        if (!versionNumber) {
            // Assume dist-tag;
            const distTags = npmMetadata['dist-tags'];
            logger.debug(`retrieveNpmMeta | distTags: ${JSON.stringify(distTags)}`);
            if (distTags) {
                const tagVersionStr = distTags[this.pluginNpmName.tag];
                logger.debug(`retrieveNpmMeta | tagVersionStr: ${tagVersionStr}`);
                // if we got a dist tag hit look up the version object
                if (tagVersionStr && tagVersionStr.length > 0 && tagVersionStr.includes('.')) {
                    versionNumber = npmMetadata.versions.find((version) => version === tagVersionStr);
                    logger.debug(`retrieveNpmMeta | versionObject: ${versionNumber}`);
                }
                else {
                    const err = new core_1.SfError(`The dist tag ${this.pluginNpmName.tag} was not found for plugin: ${this.pluginNpmName.name}`, 'NpmTagNotFound');
                    throw (0, errors_1.setErrorName)(err, 'NpmTagNotFound');
                }
            }
            else {
                throw (0, errors_1.setErrorName)(new core_1.SfError('The deployed NPM is missing dist-tags.', 'UnexpectedNpmFormat'), 'UnexpectedNpmFormat');
            }
        }
        npmModule.npmMeta.version = versionNumber;
        if (!npmMetadata.sfdx) {
            throw (0, errors_1.setErrorName)(new core_1.SfError('This plugin is not signed by Salesforce.com, Inc.', 'NotSigned'), 'NotSigned');
        }
        else {
            if (!validSalesforceHostname(npmMetadata.sfdx.publicKeyUrl)) {
                const err = new core_1.SfError(`The host is not allowed to provide signing information. [${npmMetadata.sfdx.publicKeyUrl}]`, 'UnexpectedHost');
                throw (0, errors_1.setErrorName)(err, 'UnexpectedHost');
            }
            else {
                logger.debug(`retrieveNpmMeta | versionObject.sfdx.publicKeyUrl: ${npmMetadata.sfdx.publicKeyUrl}`);
                npmModule.npmMeta.publicKeyUrl = npmMetadata.sfdx.publicKeyUrl;
            }
            if (!validSalesforceHostname(npmMetadata.sfdx.signatureUrl)) {
                const err = new core_1.SfError(`The host is not allowed to provide signing information. [${npmMetadata.sfdx.signatureUrl}]`, 'UnexpectedHost');
                throw (0, errors_1.setErrorName)(err, 'UnexpectedHost');
            }
            else {
                logger.debug(`retrieveNpmMeta | versionObject.sfdx.signatureUrl: ${npmMetadata.sfdx.signatureUrl}`);
                npmModule.npmMeta.signatureUrl = npmMetadata.sfdx.signatureUrl;
            }
            npmModule.npmMeta.tarballUrl = npmMetadata.dist?.tarball;
            logger.debug(`retrieveNpmMeta | meta.tarballUrl: ${npmModule.npmMeta.tarballUrl}`);
            return npmModule.npmMeta;
        }
    }
    async getLogger() {
        if (!this.logger) {
            this.logger = await core_1.Logger.child('InstallationVerification');
        }
        return this.logger;
    }
}
exports.InstallationVerification = InstallationVerification;
class VerificationConfig {
    get verifier() {
        return this.verifierMember;
    }
    set verifier(value) {
        this.verifierMember = value;
    }
    // eslint-disable-next-line class-methods-use-this
    log(message) {
        core_2.ux.log(message);
    }
}
exports.VerificationConfig = VerificationConfig;
async function doPrompt() {
    if (!(await new sf_plugins_core_1.Prompter().confirm('This plugin is not digitally signed and its authenticity cannot be verified. Continue installation?', 30000, false))) {
        throw new core_1.SfError('The user canceled the plugin installation.', 'InstallationCanceledError');
    }
    // they approved the plugin.  Let them know how to automate this.
    core_2.ux.log('Because you approved this plugin, you can avoid future installation confirmations by adding the plugin to the unsignedPluginAllowList.json file. For details, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_allowlist.htm.');
}
exports.doPrompt = doPrompt;
async function doInstallationCodeSigningVerification(config, plugin, verificationConfig) {
    try {
        if (!verificationConfig.verifier) {
            throw new Error('VerificationConfig.verifier is not set.');
        }
        const meta = await verificationConfig.verifier.verify();
        if (!meta.verified) {
            const err = new core_1.SfError("A digital signature is specified for this plugin but it didn't verify against the certificate.", 'FailedDigitalSignatureVerification');
            throw (0, errors_1.setErrorName)(err, 'FailedDigitalSignatureVerification');
        }
        verificationConfig.log(`Successfully validated digital signature for ${plugin.plugin}.`);
    }
    catch (err) {
        if (err instanceof Error) {
            if (err.name === 'NotSigned') {
                if (!verificationConfig.verifier) {
                    throw new Error('VerificationConfig.verifier is not set.');
                }
                if (await verificationConfig.verifier.isAllowListed()) {
                    verificationConfig.log(`The plugin [${plugin.plugin}] is not digitally signed but it is allow-listed.`);
                    return;
                }
                else {
                    return await doPrompt();
                }
            }
            else if (err.name === 'PluginNotFound' || err.name === 'PluginAccessDenied') {
                throw (0, errors_1.setErrorName)(new core_1.SfError(err.message ?? 'The user canceled the plugin installation.'), '');
            }
            throw (0, errors_1.setErrorName)(core_1.SfError.wrap(err), err.name);
        }
    }
}
exports.doInstallationCodeSigningVerification = doInstallationCodeSigningVerification;
/**
 * Retrieve url content for a host
 *
 * @param url host url.
 */
const getSigningContent = async (url) => {
    const res = await got_1.default.get({
        url,
        timeout: { request: 10000 },
        agent: { https: new proxy_agent_1.ProxyAgent() },
    });
    if (res.statusCode !== 200) {
        throw new core_1.SfError(`A request to url ${url} failed with error code: [${res.statusCode}]`, 'ErrorGettingContent');
    }
    return stream_1.Readable.from(Buffer.from(res.body));
};
//# sourceMappingURL=installationVerification.js.map