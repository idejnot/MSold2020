"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.secretTimeout = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const scratchOrgRequest_1 = require("../../../shared/scratchOrgRequest");
const scratchOrgOutput_1 = require("../../../shared/scratchOrgOutput");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'create_scratch');
exports.secretTimeout = 60000;
const definitionFileHelpGroupName = 'Definition File Override';
class EnvCreateScratch extends sf_plugins_core_1.SfCommand {
    async run() {
        const lifecycle = core_1.Lifecycle.getInstance();
        const { flags } = await this.parse(EnvCreateScratch);
        const baseUrl = flags['target-dev-hub'].getField(core_1.Org.Fields.INSTANCE_URL)?.toString();
        if (!baseUrl) {
            throw new core_1.SfError('No instance URL found for the dev hub');
        }
        const createCommandOptions = await (0, scratchOrgRequest_1.buildScratchOrgRequest)(flags, flags['client-id'] ? await this.clientSecretPrompt() : undefined);
        let lastStatus;
        if (!flags.async) {
            lifecycle.on(core_1.scratchOrgLifecycleEventName, async (data) => {
                lastStatus = (0, scratchOrgOutput_1.buildStatus)(data, baseUrl);
                this.spinner.status = lastStatus;
                return Promise.resolve();
            });
        }
        this.log();
        this.spinner.start(flags.async ? 'Requesting Scratch Org (will not wait for completion because --async)' : 'Creating Scratch Org');
        try {
            const { username, scratchOrgInfo, authFields, warnings } = await (0, core_1.scratchOrgCreate)(createCommandOptions);
            this.spinner.stop(lastStatus);
            if (!scratchOrgInfo) {
                throw new core_1.SfError('The scratch org did not return with any information');
            }
            this.log();
            if (flags.async) {
                this.info(messages.getMessage('action.resume', [this.config.bin, scratchOrgInfo.Id]));
            }
            else {
                this.logSuccess(messages.getMessage('success'));
            }
            return { username, scratchOrgInfo, authFields, warnings, orgId: authFields?.orgId };
        }
        catch (error) {
            if (error instanceof core_1.SfError && error.name === 'ScratchOrgInfoTimeoutError') {
                this.spinner.stop(lastStatus);
                const scratchOrgInfoId = error.data.scratchOrgInfoId;
                const resumeMessage = messages.getMessage('action.resume', [this.config.bin, scratchOrgInfoId]);
                this.info(resumeMessage);
                this.error('The scratch org did not complete within your wait time', { code: '69', exit: 69 });
            }
            else {
                throw error;
            }
        }
    }
    async clientSecretPrompt() {
        const { secret } = await this.timedPrompt([
            {
                name: 'secret',
                message: messages.getMessage('prompt.secret'),
                type: 'password',
            },
        ], exports.secretTimeout);
        return secret;
    }
}
exports.default = EnvCreateScratch;
EnvCreateScratch.summary = messages.getMessage('summary');
EnvCreateScratch.description = messages.getMessage('description');
EnvCreateScratch.examples = messages.getMessages('examples');
EnvCreateScratch.aliases = ['env:create:scratch'];
EnvCreateScratch.deprecateAliases = true;
EnvCreateScratch.flags = {
    alias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: messages.getMessage('flags.alias.summary'),
        description: messages.getMessage('flags.alias.description'),
    }),
    async: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.async.summary'),
        description: messages.getMessage('flags.async.description'),
    }),
    'set-default': sf_plugins_core_1.Flags.boolean({
        char: 'd',
        summary: messages.getMessage('flags.set-default.summary'),
    }),
    'definition-file': sf_plugins_core_1.Flags.file({
        exists: true,
        char: 'f',
        summary: messages.getMessage('flags.definition-file.summary'),
        description: messages.getMessage('flags.definition-file.description'),
    }),
    'target-dev-hub': sf_plugins_core_1.Flags.requiredHub({
        char: 'v',
        summary: messages.getMessage('flags.target-dev-hub.summary'),
        description: messages.getMessage('flags.target-dev-hub.description'),
        required: true,
    }),
    'no-ancestors': sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.no-ancestors.summary'),
        helpGroup: 'Packaging',
    }),
    edition: sf_plugins_core_1.Flags.string({
        char: 'e',
        summary: messages.getMessage('flags.edition.summary'),
        description: messages.getMessage('flags.edition.description'),
        options: [
            'developer',
            'enterprise',
            'group',
            'professional',
            'partner-developer',
            'partner-enterprise',
            'partner-group',
            'partner-professional',
        ],
        helpGroup: definitionFileHelpGroupName,
    }),
    'no-namespace': sf_plugins_core_1.Flags.boolean({
        char: 'm',
        summary: messages.getMessage('flags.no-namespace.summary'),
        helpGroup: 'Packaging',
    }),
    'duration-days': sf_plugins_core_1.Flags.duration({
        unit: 'days',
        default: kit_1.Duration.days(7),
        min: 1,
        max: 30,
        char: 'y',
        helpValue: '<days>',
        summary: messages.getMessage('flags.duration-days.summary'),
    }),
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        default: kit_1.Duration.minutes(5),
        min: 2,
        char: 'w',
        helpValue: '<minutes>',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
    }),
    'api-version': sf_plugins_core_1.Flags.orgApiVersion(),
    'client-id': sf_plugins_core_1.Flags.string({
        char: 'i',
        summary: messages.getMessage('flags.client-id.summary'),
    }),
    'track-source': sf_plugins_core_1.Flags.boolean({
        default: true,
        char: 't',
        summary: messages.getMessage('flags.track-source.summary'),
        description: messages.getMessage('flags.track-source.description'),
        allowNo: true,
    }),
    username: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.username.summary'),
        description: messages.getMessage('flags.username.description'),
        helpGroup: definitionFileHelpGroupName,
    }),
    description: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.description.summary'),
        helpGroup: definitionFileHelpGroupName,
    }),
    name: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.name.summary'),
        helpGroup: definitionFileHelpGroupName,
    }),
    release: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.release.summary'),
        description: messages.getMessage('flags.release.description'),
        options: ['preview', 'previous'],
        helpGroup: definitionFileHelpGroupName,
    }),
    'admin-email': sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.admin-email.summary'),
        helpGroup: definitionFileHelpGroupName,
    }),
    'source-org': sf_plugins_core_1.Flags.salesforceId({
        summary: messages.getMessage('flags.source-org.summary'),
        startsWith: '00D',
        length: 15,
        helpGroup: definitionFileHelpGroupName,
        // salesforceId flag has `i` and that would be a conflict with client-id
        char: undefined,
    }),
};
//# sourceMappingURL=scratch.js.map