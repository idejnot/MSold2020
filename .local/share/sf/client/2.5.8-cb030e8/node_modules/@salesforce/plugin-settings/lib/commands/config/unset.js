"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnSet = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-settings', 'config.unset');
class UnSet extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.responses = { successes: [], failures: [] };
    }
    async run() {
        const { argv, flags } = await this.parse(UnSet);
        if (!argv || argv.length === 0) {
            throw messages.createError('error.NoConfigKeysFound');
        }
        const config = await core_1.Config.create(core_1.Config.getDefaultOptions(flags.global));
        const globalConfig = flags.global ? config : await core_1.Config.create(core_1.Config.getDefaultOptions(true));
        await globalConfig.read();
        await config.read();
        for (const key of argv) {
            try {
                const resolvedName = this.configAggregator.getPropertyMeta(key)?.newKey ?? key;
                config.unset(resolvedName);
                if (!flags.global && globalConfig.has(resolvedName)) {
                    // If the config var is still set globally after an unset and the user didn't have the `--global` flag set, warn them.
                    this.warn(messages.getMessage('unsetGlobalWarning', [resolvedName]));
                }
                this.responses.successes.push({ name: resolvedName, success: true });
            }
            catch (error) {
                if (error instanceof Error && error.name.includes('UnknownConfigKeyError') && !this.jsonEnabled()) {
                    const suggestion = (0, config_1.calculateSuggestion)(key);
                    // eslint-disable-next-line no-await-in-loop
                    const answer = (await this.confirm(messages.getMessage('didYouMean', [suggestion]), 10 * 1000)) ?? false;
                    if (answer) {
                        config.unset(suggestion);
                        this.responses.successes.push({
                            name: suggestion,
                            success: true,
                        });
                    }
                }
                else {
                    this.responses.failures.push((0, config_1.buildFailureMsg)(key, error));
                    process.exitCode = 1;
                }
            }
        }
        await config.write();
        (0, config_1.output)(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), [...this.responses.successes, ...this.responses.failures], 'unset');
        return this.responses;
    }
}
exports.UnSet = UnSet;
UnSet.description = messages.getMessage('description');
UnSet.summary = messages.getMessage('summary');
UnSet.examples = messages.getMessages('examples');
UnSet.strict = false;
UnSet.aliases = ['force:config:unset'];
UnSet.deprecateAliases = true;
UnSet.configurationVariablesSection = config_1.CONFIG_HELP_SECTION;
UnSet.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    global: sf_plugins_core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.global.summary'),
    }),
};
//# sourceMappingURL=unset.js.map