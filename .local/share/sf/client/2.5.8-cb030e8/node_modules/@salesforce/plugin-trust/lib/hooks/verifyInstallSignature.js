"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hook = void 0;
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const installationVerification_1 = require("../shared/installationVerification");
const NpmName_1 = require("../shared/NpmName");
const hook = async function (options) {
    if (options.plugin && options.plugin.type === 'npm') {
        const logger = await core_1.Logger.child('verifyInstallSignature');
        const plugin = options.plugin;
        // skip if the plugin version being installed is listed in the CLI's JIT config
        if (plugin.tag &&
            options.config.pjson.oclif.jitPlugins &&
            plugin.name in options.config.pjson.oclif.jitPlugins &&
            options.config.pjson.oclif.jitPlugins?.[plugin.name] === plugin.tag) {
            logger.debug(`Skipping verification for ${options.plugin.name} because it is listed in the CLI's JIT config.`);
            return;
        }
        logger.debug('parsing npm name');
        const npmName = NpmName_1.NpmName.parse(plugin.name);
        logger.debug(`npmName components: ${JSON.stringify(npmName, null, 4)}`);
        npmName.tag = plugin.tag || 'latest';
        if (/^v[0-9].*/.test(npmName.tag)) {
            npmName.tag = npmName.tag.slice(1);
        }
        const configContext = {
            cacheDir: options.config.cacheDir,
            configDir: options.config.configDir,
            dataDir: options.config.dataDir,
            cliRoot: options.config.root,
        };
        const vConfig = buildVerificationConfig(npmName, configContext);
        logger.debug('finished building the VerificationConfigBuilder');
        try {
            logger.debug('doing verification');
            await (0, installationVerification_1.doInstallationCodeSigningVerification)(configContext, { plugin: plugin.name, tag: plugin.tag }, vConfig);
            core_2.ux.log('Finished digital signature check.');
        }
        catch (error) {
            if (!(error instanceof Error)) {
                throw error;
            }
            logger.debug(error.message);
            this.error(error);
        }
    }
    else {
        await (0, installationVerification_1.doPrompt)();
    }
};
exports.hook = hook;
exports.default = exports.hook;
/**
 * Build a VerificationConfig. Useful for testing.
 */
const buildVerificationConfig = (npmName, configContext) => {
    const vConfig = new installationVerification_1.VerificationConfig();
    vConfig.verifier = new installationVerification_1.InstallationVerification().setPluginNpmName(npmName).setConfig(configContext);
    return vConfig;
};
//# sourceMappingURL=verifyInstallSignature.js.map