"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.output = exports.buildSuccessMsg = exports.buildFailureMsg = exports.calculateSuggestion = exports.CONFIG_HELP_SECTION = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const Levenshtein = require("fast-levenshtein");
const ts_types_1 = require("@salesforce/ts-types");
exports.CONFIG_HELP_SECTION = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', ...new Set(core_1.Config.getAllowedProperties().map((k) => k.newKey ?? k.key)));
const calculateSuggestion = (userEnteredConfig) => {
    // we'll use this array to keep track of which key is the closest to the users entered value.
    // keys closer to the index 0 will be a closer guess than keys indexed further from 0
    // an entry at 0 would be a direct match, an entry at 1 would be a single character off, etc.
    const index = [];
    core_1.Config.getAllowedProperties()
        .map((k) => k.newKey ?? k.key)
        .map((k) => (index[Levenshtein.get(userEnteredConfig, k)] = k));
    return index.find((item) => item !== undefined) ?? '';
};
exports.calculateSuggestion = calculateSuggestion;
const buildFailureMsg = (name, err, value) => {
    const error = core_1.SfError.wrap(typeof err !== 'string' && !(err instanceof Error) ? 'Unknown error' : err);
    return {
        name,
        success: false,
        value,
        error,
        message: error.message.replace(/\.\.$/, '.'),
    };
};
exports.buildFailureMsg = buildFailureMsg;
const buildSuccessMsg = (configInfo) => {
    if (Array.isArray(configInfo.value)) {
        throw new core_1.SfError(`Config ${configInfo.key} is an Array.  It should be a primitive.`);
    }
    if ((0, ts_types_1.isJsonMap)(configInfo.value)) {
        throw new core_1.SfError(`Config ${configInfo.key} is an Object.  It should be a primitive.`);
    }
    return {
        name: configInfo.key,
        key: configInfo.key,
        value: configInfo.value,
        path: configInfo.path,
        success: true,
        location: configInfo.location,
    };
};
exports.buildSuccessMsg = buildSuccessMsg;
const output = (ux, responses, command, verbose = false) => {
    if (!ux.outputEnabled) {
        return;
    }
    if (responses.length === 0) {
        ux.log('No results found');
        return;
    }
    ux.table(responses, {
        name: { header: 'Name' },
        ...(verbose
            ? {
                location: {
                    header: 'Location',
                    get: (row) => row.location ?? '',
                },
            }
            : {}),
        ...(command === 'unset'
            ? {}
            : {
                value: {
                    header: 'Value',
                    get: (row) => row.value,
                },
            }),
        ...(command === 'list' ? {} : { success: { header: 'Success' } }),
        ...(responses.some((msg) => msg.error)
            ? {
                message: {
                    header: 'Message',
                    get: (row) => row.error?.message ?? '',
                },
            }
            : {}),
    }, { title: commandToTitleMapping[command] });
};
exports.output = output;
const commandToTitleMapping = {
    set: 'Set Config',
    unset: 'Unset Config',
    list: 'List Config',
    get: 'Get Config',
};
//# sourceMappingURL=config.js.map