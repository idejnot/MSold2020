"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Get = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-settings', 'config.get');
class Get extends sf_plugins_core_1.SfCommand {
    async run() {
        const { argv, flags } = await this.parse(Get);
        const responses = [];
        if (!argv || argv.length === 0) {
            throw messages.createError('error.NoConfigKeysFound');
        }
        const aggregator = await core_1.ConfigAggregator.create();
        for (const configName of argv) {
            try {
                responses.push((0, config_1.buildSuccessMsg)(aggregator.getInfo(configName)));
            }
            catch (err) {
                if (err instanceof Error && err.name.includes('UnknownConfigKeyError') && !this.jsonEnabled()) {
                    const suggestion = (0, config_1.calculateSuggestion)(configName);
                    // eslint-disable-next-line no-await-in-loop
                    const answer = (await this.confirm(messages.getMessage('didYouMean', [suggestion]), 10 * 1000)) ?? false;
                    if (answer) {
                        responses.push((0, config_1.buildSuccessMsg)(aggregator.getInfo(suggestion, false)));
                    }
                }
                else {
                    responses.push((0, config_1.buildFailureMsg)(configName, err));
                    process.exitCode = 1;
                }
            }
        }
        (0, config_1.output)(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), responses, 'get', flags.verbose);
        return responses;
    }
}
exports.Get = Get;
Get.description = messages.getMessage('description');
Get.summary = messages.getMessage('summary');
Get.examples = messages.getMessages('examples');
Get.aliases = ['force:config:get'];
Get.deprecateAliases = true;
Get.strict = false;
Get.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
};
Get.configurationVariablesSection = config_1.CONFIG_HELP_SECTION;
//# sourceMappingURL=get.js.map